-Permit root users over SSH:
 
sed -i 's/^PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config
/etc/init.d/ssh restart
 *************************************************************
-After logging in as root over SSH:

si en caso no installa nada
sudo apt-get dist-upgrade
reboot
 
sudo apt-get install git ruby sudo apt-cacher-ng qemu-utils debootstrap lxc python-cheetah parted kpartx bridge-utils make ubuntu-archive-keyring curl

sudo apt-get install apache2 git apt-cacher-ng python-vm-builder qemu-kvm ruby qemu-utils rubygems

adduser debian sudo
**************************************************************


echo "%sudo ALL=NOPASSWD: /usr/bin/lxc-start" > /etc/sudoers.d/gitian-lxc
echo "%sudo ALL=NOPASSWD: /usr/bin/lxc-execute" >> /etc/sudoers.d/gitian-lxc
echo '#!/bin/sh -e' > /etc/rc.local
echo 'brctl addbr br0' >> /etc/rc.local
echo 'ifconfig br0 10.0.3.2/24 up' >> /etc/rc.local
echo 'iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE' >> /etc/rc.local
echo 'echo 1 > /proc/sys/net/ipv4/ip_forward' >> /etc/rc.local
echo 'exit 0' >> /etc/rc.local
echo 'export USE_LXC=1' >> /home/debian/.profile
echo 'export GITIAN_HOST_IP=10.0.3.2' >> /home/debian/.profile
echo 'export LXC_GUEST_IP=10.0.3.5' >> /home/debian/.profile
reboot
 
***********************************************
After logging in as debian over SSH:

--se ejecuta desde debian@debian:
 
wget http://archive.ubuntu.com/ubuntu/pool/universe/v/vm-builder/vm-builder_0.12.4+bzr494.orig.tar.gz

echo "76cbf8c52c391160b2641e7120dbade5afded713afaa6032f733a261f13e6a8e  vm-builder_0.12.4+bzr494.orig.tar.gz" | sha256sum -c

# (verification -- must return OK)***********************
tar -zxvf vm-builder_0.12.4+bzr494.orig.tar.gz
cd vm-builder-0.12.4+bzr494
sudo python setup.py install

cd ..

************************************************************
git clone https://github.com/devrandom/gitian-builder.git

git clone https://github.com/INTICOIN/INTICOIN_BETA

Clone your coin into debian's home folder using git:
 -------------------------------------------------------------
IMPORTANTE: file bin/make-base-vm predeterminada fallará con Debian Jessie. 
Resolverlo es fácil, solo agregue sudo antes de mkfs.ext4 en la línea 114:
Código:
$ git diff 
diff --git a/bin/make-base-vm b/bin/make-base-vm 
index 7fc7818..e51b1a2 100755 
--- a/bin/make-base-vm 
+++ b/bin/make-base-vm 
@@ -114,7 +114,7 @@ 
if [$ LXC = "1"]; then
   # Necesito el universo para lxc en lucid 
   env -i LANG = en_US.UTF-8 LC_ALL = en_US.UTF-8 sudo debootstrap --arch = $ ARCH --include = $ addpkg --exclude = $ removepkg --components = main , universo $ SUITE $ OUT-bootstrap $ MIRROR 
   dd if = / dev / zero of = $ OUT-lxc bs = 1M count = 1 seek = 10240 
- mkfs.ext4 -F $ OUT-lxc              <-x--
+ sudo mkfs.ext4 -F $ OUT-lxc        <----
   t = `mktemp -d gitian.XXXXXXXX` 
   sudo mount $ OUT-lxc $ t 
   sudo cp -a $ OUT-bootstrap / * $ t
 ------------------------------------------------------------
link para mac
https://github.com/bitcoin/bitcoin/blob/master/doc/release-process.md#fetch-and-build-inputs-first-time-or-when-dependency-versions-change

-----------------------------------------------
Build base VM:
----------gitian-builder 
export USE_LXC=1
bin/make-base-vm --lxc --arch amd64 --suite precise
 
-------------------------------------------------------------

cd ~debian/dash
git pull
cd ~debian/gitian-builder
make -C ../INTICOIN_BETA1.1/depends download SOURCES_PATH=`pwd`/cache/common

Building dash binaries
Now you only need to start compiling dash.

REMARK: The first time you run the following commands it will update the base image and compile the full dependencies and it will take A LOT of time. You can monitor the install and build by using:
Code:
tail -f var/install.log
Or:
Code:
tail -f var/build.log
------------------------------------------------------------

Dependencies (make sure this is done in the gitian-builder directory):
 
mkdir -p inputs; cd inputs/

***todo esto wget se corre en el directorio de inputs/
 
wget 'http://miniupnp.free.fr/files/download.php?file=miniupnpc-1.9.20140401.tar.gz' -O 'miniupnpc-1.9.20140401.tar.gz'
wget 'https://www.openssl.org/source/openssl-1.0.1k.tar.gz'
wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'
wget 'https://www.zlib.net/fossils/zlib-1.2.8.tar.gz'
wget 'ftp://ftp.simplesystems.org/pub/libpng/png/src/history/libpng16/libpng-1.6.8.tar.gz'
wget 'http://fukuchi.org/works/qrencode/qrencode-3.4.3.tar.bz2'
wget 'http://downloads.sourceforge.net/project/boost/boost/1.55.0/boost_1_55_0.tar.bz2'
wget 'https://downloads.sourceforge.net/projects/boost/boost/1.58.0/boost_1_58_0.tar.bz2'
wget 'https://download.qt.io/archive/qt/4.8/4.8.5/qt-everywhere-opensource-src-4.8.5.tar.gz'
wget 'https://svn.boost.org/trac/boost/raw-attachment/ticket/7262/boost-mingw.patch' -O boost-mingw-gas-cross-compile-2013-03-03.patch
*********************************************************************************** 
Building depencies (in gitian-builder, replace instances of 'funcoin' with whatever you named your clone):
 --se ejecutan dentro de gitian-builder/
----./bin/gbuild --commit INTICOIN ../INTICOIN_BETA/contrib/gitian-descriptors/gitian-linux.yml

./bin/gbuild ../INTICOIN_BETA/contrib/gitian-descriptors/boost-win32.yml

mv build/out/boost-*.zip inputs/
****** 
./bin/gbuild ../INTICOIN_BETA/contrib/gitian-descriptors/deps-win32.yml

mv build/out/bitcoin*.zip inputs/
***** 
./bin/gbuild ../INTICOIN_BETA/contrib/gitian-descriptors/qt-win32.yml

./bin/gbuild --commit INTICOIN_BETA=v1.0.0 --url INTICOIN_BETA="https://github.com/INTICOIN/INTICOIN_BETA" ../INTICOIN_BETA/contrib/gitian-descriptors/qt-win32.yml

mv build/out/qt*.zip inputs/
***** 
Compile your coin (remember tag & name change):
 
./bin/gbuild --commit INTICOIN_BETA=v1.0.0 ../INTICOIN_BETA/contrib/gitian-descriptors/gitian-win32.yml


./bin/gbuild --commit INTICOIN_BETA=v1.0.0 --url INTICOIN_BETA1.1="https://github.com/INTICOIN/INTICOIN_BETA1.1" ../INTICOIN_BETA1.1/contrib/gitian-descriptors/gitian-win32.yml

*********aquiiiiiiiiiii  finalizaaaaaaaaaaaaaa





-----esto corresponde al primer video para cambiar los nombres
https://en.bitcoin.it/wiki/List_of_address_prefixes
**********************************************************

como minar
https://www.taringa.net/posts/ebooks-tutoriales/19007712/Minar-con-Monederos-pos.html

https://windows-10.uptodown.com/windows/descargar

https://www.youtube.com/watch?v=WCrBE7Cm438   ---vps ubuntu instalacion

tube diversos problemas para correr el daemond

error de db_cxx.h
actualice
sudo apt-get install libdb5.3-dev libdb5.3++-dev

y procedi a crear el diamond nuevamente


git diff
diff --git a/bin/make-base-vm b/bin/make-base-vm
index 7fc7818..e51b1a2 100755
--- a/bin/make-base-vm
+++ b/bin/make-base-vm
@@ -114,7 +114,7 @@ if [ $LXC = "1" ]; then
   # Need universe for lxc in lucid
   env -i LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 sudo debootstrap --arch=$ARCH --include=$addpkg --exclude=$removepkg --components=main,universe $SUITE $OUT-bootstrap $MIRROR
   dd if=/dev/zero of=$OUT-lxc bs=1M count=1 seek=10240
-  sudo mkfs.ext4 -F $OUT-lxc
+  sudo mkfs.ext4 -F $OUT-lxc
   t=`mktemp -d gitian.XXXXXXXX`
   sudo mount $OUT-lxc $t
   sudo cp -a $OUT-bootstrap/* $t


   error
   ./bin/gbuild:21:in `system!': failed to run on-target setarch x86_64 bash -x < var/build-script > var/build.log 2>&1 (RuntimeError)

   - "url": "https://github.com/INTICOIN/INTICOIN_BETA1.1.git"
  "dir": "INTICOIN_BETA1.1"

  En la parte 5 te mostraré cómo subir a github y construir la billetera de Windows. Es la parte más difícil que verás, de hecho no puedo hacerlo bien la primera vez. Las instrucciones de compilación de Gitian están aquí: 
  sudo bin/gbuild ../learncoin/contrib/gitian-descriptors/deps-win32.yml 
  build qt 
  sudo bin/gbuild ../learncoin/contrib/gitian-descriptors/qt-win32.yml 
  build boost 
  sudo bin/gbuild ../learncoin/contrib/gitian-descriptors/boost-win32.yml 
  construye la línea de los remotos de cambio de cartera debajo de "remotes: []" 
  sudo bin / gbuild --commit learncoin = HEAD ../learncoin/contrib/ gitian-descriptors / gitian-win32.yml Deps

   bin/make-base-vm --lxc --arch x86_64 --suite xenial


PATH=$PATH:$(pwd)/libexec
make-clean-vm --suite precise --arch x86_64
   start-target 32 precise-x86_64
   on-target setarch amd64 bash -x
   on-target ls -la
stop-target
sudo service apt-cacher-ng status
ls -1 /dev/kvm

habilita apt-cacher
sudo /etc/init.d/apt-cacher-ng start

apt-get install git ruby ​​sudo apt-cacher-ng qemu-utils debootstrap lxc python-cheetah parted kpartx bridge-utils


agregar lxc.config.in
lxc.mount.entry=shm dev/shm tmpfs rw,nodev,noexec,nosuid,relatime,mode=1777,create=dir 0 0

borrando etiquetas en git
git log --oneline --decorate --all --graph

agragar etiquetas
git tag name_tag

borrar tag en github
git push origin :v1.1.0


# agregar cgroup para LXC 
echo 'cgroup /sys/fs/cgroup cgroup defaults 0 0' >> /etc/fstab
# make /etc/rc.local script que establece un puente entre el invitado y el host 
echo '#! /bin/sh -e '> /etc/rc.local 
echo 'brctl addbr br0 '>> /etc/rc.local 
echo 'ifconfig br0 10.0.3.2/24 up '>> /etc/rc.local 
echo 'exit 0 '>> /etc/rc.loca

echo 'export USE_LXC = 1' >> /home/ubuntu/.profile 
echo 'export GITIAN_HOST_IP = 10.0.3.2 '>> /home/ubuntu/.profile 
echo 'export LXC_GUEST_IP = 10.0.3.5 '>> /home/ubuntu/.profile 

ssh ubuntu@127.0.0.1 -p 22 -i ~/.ssh/ubuntu


cd ..
cd INTICOIN_BETA
git tag -d v1.0.0
git push origin :refs/tags/v1.0.0
git status
git add *
 git commit -m 'del32 .o'
  git tag -a v1.0.0 -m "Version 1.0 Stable"
   git push origin master
    git push --tags

    cd ..
    cd gitian-builder